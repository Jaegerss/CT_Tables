<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="31">
  <CheatEntries>
    <CheatEntry>
      <ID>1</ID>
      <Description>"Enable"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{$lua}
LaunchMonoDataCollector()
{$asm}
 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>15</ID>
          <Description>"Godmode"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

alloc(newmems,2048)
label(returnheres)
label(originalcodes)
label(exits)

newmems: //this is allocated memory, you have read,write,execute access
//place your code here

originalcodes:
push esi
mov esi,exits
mov [esi],eax
pop esi
mov eax,[edi+20]
mov eax,[eax+00000098]
jmp returnheres

exits:


UnitHud:Update+33:
jmp newmems
nop
nop
nop
nop
returnheres:

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
push ebp
mov ebp,esp
push esi
push edi
mov edi,exits
mov esi,[ebp+08]
cmp esi,00100000
jna exit
nop 4
mov esi,[esi+00000288]
cmp [edi],esi
jne exit
nop 4
pop edi
pop esi
leave
ret
exit:
pop edi
pop esi
push edi
sub esp,00000024
mov edi,[ebp+08]
jmp returnhere



GOAP:UnitModel:ApplyDamage:
jmp newmem
nop 2
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
dealloc(newmems)
GOAP:UnitModel:ApplyDamage:
push ebp
mov ebp,esp
push edi
sub esp,24
mov edi,[ebp+08]

UnitHud:Update+33:
mov eax,[edi+20]
mov eax,[eax+00000098]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>6</ID>
          <Description>"Inf Morale"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
mov eax,[edi+08]
mov eax, [eax+6c]
test eax,eax
jne normal
mov eax,[edi+08]
fld1
fstp dword ptr [eax+00000238]
normal:
mov eax,[edi+08]
mov [ebp-0000026C],eax

exit:
jmp returnhere

GOAP.Modifier:Morale:Update+6f0:
jmp newmem
nop 4
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
GOAP.Modifier:Morale:Update+6f0:
mov eax,[edi+08]
mov [ebp-0000026C],eax
//Alt: db 8B 47 08 89 85 94 FD FF FF
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>8</ID>
          <Description>"Inf Condition"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
mov eax,[edi+08]
mov eax,[eax+6C]
test eax,eax
jne normal
mov eax,[edi+08]
fld1
fstp dword ptr [eax+00000234]
normal:
mov eax,[edi+08]
fld dword ptr [eax+00000234]

exit:
jmp returnhere

GOAP.Modifier:Fatigue:Update+62:
jmp newmem
nop 4
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
GOAP.Modifier:Fatigue:Update+62:
mov eax,[edi+08]
fld dword ptr [eax+00000234]
//Alt: db 8B 47 08 D9 80 34 02 00 00

// 305 2d8 33e
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>14</ID>
          <Description>"Instant Reload"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
mov eax,[edi+08]
mov eax,[eax+6C]
test eax,eax
jne normal
mov eax,[edi+08]
mov ecx, eax
fld1
fstp dword ptr [eax+00000240]
normal:
mov eax,[edi+08]
fld dword ptr [eax+0000023C]

exit:
jmp returnhere

GOAP.Modifier:Reload:Update+38:
jmp newmem
nop 4
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
GOAP.Modifier:Reload:Update+38:
mov eax,[edi+08]
fld dword ptr [eax+0000023C]
//Alt: db 8B 47 08 D9 80 38 02 00 00 8B 47 08
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7</ID>
          <Description>"Inf Ammo"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
mov eax,[esi+14]
mov eax,[eax+6C]
test eax,eax
jne normal
mov eax,[esi+14]
mov ecx, eax
fld dword ptr [ecx+000001E8]
fstp dword ptr [eax+000001ec]
normal:
mov eax,[esi+14]
fld dword ptr [eax+000001EC]

exit:
jmp returnhere

GOAP.Action:RangeAttack:OnComplete+237:
jmp newmem
nop 4
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
GOAP.Action:RangeAttack:OnComplete+237:
mov eax,[esi+14]
fld dword ptr [eax+000001EC]
//Alt: db 8B 46 14 D9 80 EC 01 00 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>13</ID>
          <Description>"Inf Ammo (Artillery)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
mov eax,[esi+14]
mov eax,[eax+6C]
test eax,eax
jne normal
mov eax,[esi+14]
mov ecx, eax
fld dword ptr [ecx+000001E8]
fstp dword ptr [eax+000001ec]
normal:
mov eax,[esi+14]
fld dword ptr [eax+000001EC]

exit:
jmp returnhere

GOAP.Action:RangeAttack:OnComplete+265:
jmp newmem
nop 4
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
GOAP.Action:RangeAttack:OnComplete+265:
mov eax,[esi+14]
fld dword ptr [eax+000001EC]
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry Color="20000000">
      <Description>Change of mov eax,[ebp+08]</Description>
      <AddressString>0514985A</AddressString>
      <Before>
        <Byte>EB</Byte>
        <Byte>13</Byte>
        <Byte>D9</Byte>
        <Byte>45</Byte>
        <Byte>F4</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>45</Byte>
        <Byte>08</Byte>
      </Actual>
      <After>
        <Byte>D9</Byte>
        <Byte>00</Byte>
        <Byte>33</Byte>
        <Byte>C0</Byte>
        <Byte>DF</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of fld dword ptr [eax]</Description>
      <AddressString>0514985D</AddressString>
      <Before>
        <Byte>45</Byte>
        <Byte>F4</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>33</Byte>
        <Byte>C0</Byte>
        <Byte>DF</Byte>
        <Byte>F1</Byte>
        <Byte>DD</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of mov eax,[ebp+08]</Description>
      <AddressString>0514979C</AddressString>
      <Before>
        <Byte>EB</Byte>
        <Byte>0D</Byte>
        <Byte>D9</Byte>
        <Byte>45</Byte>
        <Byte>0C</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>45</Byte>
        <Byte>08</Byte>
      </Actual>
      <After>
        <Byte>D9</Byte>
        <Byte>18</Byte>
        <Byte>B8</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of fstp dword ptr [eax]</Description>
      <AddressString>0514979F</AddressString>
      <Before>
        <Byte>45</Byte>
        <Byte>0C</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>18</Byte>
      </Actual>
      <After>
        <Byte>B8</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of fld dword ptr [ebx+6C]</Description>
      <AddressString>0516E714</AddressString>
      <Before>
        <Byte>F9</Byte>
        <Byte>FF</Byte>
        <Byte>83</Byte>
        <Byte>C4</Byte>
        <Byte>10</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>43</Byte>
        <Byte>6C</Byte>
      </Actual>
      <After>
        <Byte>D9</Byte>
        <Byte>05</Byte>
        <Byte>B0</Byte>
        <Byte>4A</Byte>
        <Byte>97</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of fld dword ptr [ebx+6C]</Description>
      <AddressString>0516E8A9</AddressString>
      <Before>
        <Byte>D9</Byte>
        <Byte>45</Byte>
        <Byte>F4</Byte>
        <Byte>DE</Byte>
        <Byte>E9</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>43</Byte>
        <Byte>6C</Byte>
      </Actual>
      <After>
        <Byte>DE</Byte>
        <Byte>C9</Byte>
        <Byte>D9</Byte>
        <Byte>9D</Byte>
        <Byte>24</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of fld dword ptr [ebx+6C]</Description>
      <AddressString>0516E909</AddressString>
      <Before>
        <Byte>FE</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
        <Byte>DE</Byte>
        <Byte>E9</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>43</Byte>
        <Byte>6C</Byte>
      </Actual>
      <After>
        <Byte>DE</Byte>
        <Byte>C9</Byte>
        <Byte>DE</Byte>
        <Byte>C1</Byte>
        <Byte>D9</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of fld dword ptr [ebx+6C]</Description>
      <AddressString>0516F025</AddressString>
      <Before>
        <Byte>4D</Byte>
        <Byte>90</Byte>
        <Byte>89</Byte>
        <Byte>48</Byte>
        <Byte>08</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>43</Byte>
        <Byte>6C</Byte>
      </Actual>
      <After>
        <Byte>D9</Byte>
        <Byte>E8</Byte>
        <Byte>DF</Byte>
        <Byte>F1</Byte>
        <Byte>DD</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of mov edi,[ebp+08]</Description>
      <AddressString>2D51E16F</AddressString>
      <Before>
        <Byte>EC</Byte>
        <Byte>57</Byte>
        <Byte>83</Byte>
        <Byte>EC</Byte>
        <Byte>24</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>7D</Byte>
        <Byte>08</Byte>
      </Actual>
      <After>
        <Byte>83</Byte>
        <Byte>EC</Byte>
        <Byte>0C</Byte>
        <Byte>57</Byte>
        <Byte>8B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of add [eax],eax</Description>
      <AddressString>00B80819</AddressString>
      <Before>
        <Byte>E5</Byte>
        <Byte>6A</Byte>
        <Byte>36</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols/>
  <Comments>Info about this table:
</Comments>
</CheatTable>
